//
//  PermissionsHelper.swift
//  Secretino
//
//  Gestionnaire des permissions syst√®me et premi√®re configuration AM√âLIOR√â
//

import Cocoa
import SwiftUI

class PermissionsHelper {
    static let shared = PermissionsHelper()
    
    private enum UserDefaultsKeys {
        static let lastVersion = "secretino_last_version"
        static let hasShownWelcome = "secretino_has_shown_welcome"
        static let lastPermissionCheck = "secretino_last_permission_check"
    }
    
    private init() {}
    
    /// V√©rifie les permissions et g√®re la premi√®re configuration
    func checkInitialPermissions() {
        let currentVersion = getCurrentVersion()
        let lastVersion = UserDefaults.standard.string(forKey: UserDefaultsKeys.lastVersion)
        let hasShownWelcome = UserDefaults.standard.bool(forKey: UserDefaultsKeys.hasShownWelcome)
        
        print("üîç V√©rification initiale des permissions...")
        print("   Version actuelle: \(currentVersion)")
        print("   Derni√®re version: \(lastVersion ?? "aucune")")
        print("   Bienvenue montr√©e: \(hasShownWelcome)")
        
        // Mettre √† jour la version
        UserDefaults.standard.set(currentVersion, forKey: UserDefaultsKeys.lastVersion)
        
        let isFirstLaunch = (lastVersion == nil)
        let isNewVersion = (lastVersion != currentVersion)
        
        if isFirstLaunch {
            print("üÜï Premier lancement d√©tect√©")
            handleFirstLaunch()
        } else if isNewVersion {
            print("üîÑ Nouvelle version d√©tect√©e")
            handleVersionUpdate(from: lastVersion, to: currentVersion)
        } else {
            print("‚ÑπÔ∏è Lancement normal")
            performSilentPermissionCheck()
        }
    }
    
    private func handleFirstLaunch() {
        // Marquer comme premi√®re ex√©cution
        UserDefaults.standard.set(true, forKey: UserDefaultsKeys.hasShownWelcome)
        
        // Afficher le message de bienvenue et demander les permissions imm√©diatement
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            self.showWelcomeAndRequestPermissions()
        }
    }
    
    private func handleVersionUpdate(from oldVersion: String?, to newVersion: String) {
        print("üìà Mise √† jour de \(oldVersion ?? "inconnue") vers \(newVersion)")
        
        // V√©rifier silencieusement les permissions
        performSilentPermissionCheck()
        
        // Si c'est une mise √† jour majeure, on peut afficher des informations
        // Pour l'instant, on reste silencieux
    }
    
    private func performSilentPermissionCheck() {
        let hasAccessibility = hasAccessibilityPermission()
        let hasPassphrase = SecureKeychainManager.shared.hasGlobalPassphrase()
        
        print("üìä √âtat des permissions:")
        print("   Accessibilit√©: \(hasAccessibility ? "‚úÖ" : "‚ùå")")
        print("   Passphrase configur√©e: \(hasPassphrase ? "‚úÖ" : "‚ùå")")
        
        // Enregistrer la derni√®re v√©rification
        UserDefaults.standard.set(Date().timeIntervalSince1970, forKey: UserDefaultsKeys.lastPermissionCheck)
        
        // Si tout est configur√©, on peut essayer d'activer automatiquement
        if hasAccessibility && hasPassphrase {
            print("üéØ Configuration compl√®te d√©tect√©e - activation automatique possible")
        }
    }
    
    /// Affiche le message de bienvenue et demande les permissions
    private func showWelcomeAndRequestPermissions() {
        DispatchQueue.main.async {
            let alert = NSAlert()
            alert.messageText = "Bienvenue dans Secretino! üîê"
            alert.informativeText = """
            Secretino prot√®ge vos donn√©es avec un chiffrement militaire AES-256-GCM.
            
            Fonctionnalit√©s principales :
            ‚Ä¢ Chiffrement ultra-s√©curis√© avec protection biom√©trique
            ‚Ä¢ Raccourcis globaux ‚åÉ‚áßE (chiffrer) et ‚åÉ‚áßD (d√©chiffrer)
            ‚Ä¢ Fonctionne dans toutes les applications
            ‚Ä¢ Stockage s√©curis√© dans le Keychain macOS
            
            Pour utiliser les raccourcis globaux, Secretino a besoin :
            1. D'une passphrase s√©curis√©e (avec Touch ID/Face ID)
            2. De l'autorisation d'accessibilit√©
            
            Voulez-vous configurer cette autorisation maintenant ?
            """
            alert.alertStyle = .informational
            alert.addButton(withTitle: "Autoriser maintenant")
            alert.addButton(withTitle: "Plus tard")
            
            let response = alert.runModal()
            if response == .alertFirstButtonReturn {
                // D√©clencher directement la demande de permissions
                self.triggerAccessibilityRequest()
                
                // Ouvrir les pr√©f√©rences apr√®s un court d√©lai
                DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
                    self.openSettingsForConfiguration()
                }
            }
        }
    }

    /// D√©marre le processus de configuration compl√®te
    private func startSetupProcess() {
        print("üöÄ D√©marrage du processus de configuration...")
        
        // √âtape 1: V√©rifier/demander les permissions d'accessibilit√©
        if !hasAccessibilityPermission() {
            requestAccessibilityPermission()
        } else {
            // Permissions d√©j√† accord√©es, ouvrir directement les pr√©f√©rences
            openSettingsForConfiguration()
        }
    }
    
    /// Demande les permissions d'accessibilit√© avec instructions
    func requestAccessibilityPermission() {
        print("üîê Demande des permissions d'accessibilit√©...")
        
        DispatchQueue.main.async {
            let alert = NSAlert()
            alert.messageText = "Autorisation d'accessibilit√© requise"
            alert.informativeText = """
            Pour que les raccourcis globaux fonctionnent, Secretino doit √™tre autoris√© dans les pr√©f√©rences d'accessibilit√©.
            
            macOS va maintenant ouvrir les Pr√©f√©rences Syst√®me.
            
            Instructions :
            1. Cliquez sur le cadenas üîí et entrez votre mot de passe
            2. Cochez la case √† c√¥t√© de "Secretino" ‚úì
            3. Revenez √† Secretino pour terminer la configuration
            """
            alert.alertStyle = .informational
            alert.addButton(withTitle: "Ouvrir Pr√©f√©rences Syst√®me")
            alert.addButton(withTitle: "Plus tard")
            
            if alert.runModal() == .alertFirstButtonReturn {
                self.triggerAccessibilityRequest()
                
                // Surveiller les changements de permissions
                self.startPermissionMonitoring()
            }
        }
    }
    
    /// Force macOS √† afficher la demande d'accessibilit√©
    func triggerAccessibilityRequest() {
        let options: NSDictionary = [kAXTrustedCheckOptionPrompt.takeUnretainedValue() as String: true]
        let trusted = AXIsProcessTrustedWithOptions(options)
        
        print("üîì Demande d'accessibilit√© d√©clench√©e, statut: \(trusted)")
        
        // Ne PAS ouvrir automatiquement les pr√©f√©rences
        // L'utilisateur peut cliquer sur le bouton dans la fen√™tre syst√®me
    }
    
    /// Surveille les changements de permissions apr√®s la demande
    private func startPermissionMonitoring() {
        var checkCount = 0
        let maxChecks = 30 // 30 secondes maximum
        
        let timer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { timer in
            checkCount += 1
            
            if self.hasAccessibilityPermission() {
                timer.invalidate()
                print("‚úÖ Permissions d'accessibilit√© accord√©es!")
                
                DispatchQueue.main.async {
                    self.onPermissionGranted()
                }
            } else if checkCount >= maxChecks {
                timer.invalidate()
                print("‚è∞ Timeout de surveillance des permissions")
            }
        }
        
        // Garder une r√©f√©rence au timer pour √©viter qu'il soit deallocated
        Timer.scheduledTimer(withTimeInterval: 31.0, repeats: false) { _ in
            timer.invalidate()
        }
    }
    
    /// Appel√© quand les permissions sont accord√©es
    private func onPermissionGranted() {
        let alert = NSAlert()
        alert.messageText = "Permissions accord√©es! ‚úÖ"
        alert.informativeText = """
        Excellent! Secretino peut maintenant utiliser les raccourcis globaux.
        
        √âtape suivante : configurez votre passphrase s√©curis√©e dans les pr√©f√©rences.
        """
        alert.alertStyle = .informational
        alert.addButton(withTitle: "Ouvrir Pr√©f√©rences")
        alert.addButton(withTitle: "Plus tard")
        
        if alert.runModal() == .alertFirstButtonReturn {
            openSettingsForConfiguration()
        }
    }
    
    /// Ouvre les pr√©f√©rences de l'app pour configuration
    private func openSettingsForConfiguration() {
        // Envoyer une notification pour ouvrir les pr√©f√©rences
        NotificationCenter.default.post(name: NSNotification.Name("OpenSettings"), object: nil)
    }
    
    /// Ouvre directement les pr√©f√©rences d'accessibilit√© syst√®me
    func openAccessibilityPreferences() {
        let url = URL(string: "x-apple.systempreferences:com.apple.preference.security?Privacy_Accessibility")!
        NSWorkspace.shared.open(url)
    }
    
    /// V√©rifie si l'app a les permissions sans demander
    func hasAccessibilityPermission() -> Bool {
        let options: NSDictionary = [kAXTrustedCheckOptionPrompt.takeUnretainedValue() as String: false]
        return AXIsProcessTrustedWithOptions(options)
    }
    
    /// Affiche des instructions d√©taill√©es pour activer les permissions
    func showPermissionInstructions() {
        DispatchQueue.main.async {
            let alert = NSAlert()
            alert.messageText = "Comment activer les permissions d'accessibilit√©"
            alert.informativeText = """
            üìã Instructions d√©taill√©es :
            
            1. Ouvrez "Pr√©f√©rences Syst√®me" (ou "R√©glages Syst√®me" sur macOS 13+)
            2. Allez dans "S√©curit√© et confidentialit√©" ‚Üí "Accessibilit√©"
            3. Cliquez sur le cadenas üîí en bas √† gauche
            4. Entrez votre mot de passe Mac
            5. Cochez la case √† c√¥t√© de "Secretino" ‚úì
            
            üí° Astuces :
            ‚Ä¢ Si Secretino n'appara√Æt pas, glissez-d√©posez l'app dans la liste
            ‚Ä¢ Red√©marrez Secretino apr√®s avoir activ√© les permissions
            ‚Ä¢ Vous pouvez d√©sactiver ces permissions √† tout moment
            
            ‚ö†Ô∏è Ces permissions permettent √† Secretino de :
            ‚Ä¢ Lire le texte s√©lectionn√© dans d'autres apps
            ‚Ä¢ Simuler des frappes clavier (copier/coller)
            ‚Ä¢ √âcouter les raccourcis globaux ‚åÉ‚áßE et ‚åÉ‚áßD
            """
            alert.alertStyle = .informational
            alert.addButton(withTitle: "Ouvrir Pr√©f√©rences Syst√®me")
            alert.addButton(withTitle: "Compris")
            
            if alert.runModal() == .alertFirstButtonReturn {
                self.openAccessibilityPreferences()
            }
        }
    }
    
    /// Affiche une alerte si les permissions sont manquantes
    func showPermissionRequiredAlert() {
        DispatchQueue.main.async {
            let alert = NSAlert()
            alert.messageText = "Permissions d'accessibilit√© requises"
            alert.informativeText = """
            Les raccourcis globaux ne peuvent pas fonctionner sans l'autorisation d'accessibilit√©.
            
            Sans cette permission :
            ‚ùå Les raccourcis ‚åÉ‚áßE et ‚åÉ‚áßD ne fonctionneront pas
            ‚ùå Secretino ne peut pas lire le texte s√©lectionn√©
            ‚ùå Le remplacement automatique du texte est impossible
            
            ‚úÖ Avec cette permission :
            ‚Ä¢ Chiffrement/d√©chiffrement instantan√© dans toute app
            ‚Ä¢ Workflow fluide et s√©curis√©
            ‚Ä¢ Protection automatique de vos donn√©es sensibles
            """
            alert.alertStyle = .warning
            alert.addButton(withTitle: "Configurer maintenant")
            alert.addButton(withTitle: "Instructions d√©taill√©es")
            alert.addButton(withTitle: "Plus tard")
            
            let response = alert.runModal()
            switch response {
            case .alertFirstButtonReturn:
                self.triggerAccessibilityRequest()
            case .alertSecondButtonReturn:
                self.showPermissionInstructions()
            default:
                break
            }
        }
    }
    
    /// V√©rifie p√©riodiquement si les permissions ont chang√©
    func startPeriodicPermissionCheck() {
        Timer.scheduledTimer(withTimeInterval: 30.0, repeats: true) { _ in
            let hasPermission = self.hasAccessibilityPermission()
            let lastCheck = UserDefaults.standard.double(forKey: UserDefaultsKeys.lastPermissionCheck)
            let now = Date().timeIntervalSince1970
            
            // Si les permissions ont chang√© depuis la derni√®re v√©rification
            if now - lastCheck > 30 { // V√©rifier toutes les 30 secondes minimum
                UserDefaults.standard.set(now, forKey: UserDefaultsKeys.lastPermissionCheck)
                
                // Mettre √† jour l'√©tat du gestionnaire de raccourcis si n√©cessaire
                if hasPermission && SecureKeychainManager.shared.hasGlobalPassphrase() {
                    // Les conditions sont remplies, on peut activer automatiquement
                    if !GlobalHotkeyManager.shared.isEnabled {
                        print("üîÑ Permissions restaur√©es - tentative d'activation automatique")
                        DispatchQueue.main.async {
                            GlobalHotkeyManager.shared.setupHotkeys()
                        }
                    }
                } else if !hasPermission && GlobalHotkeyManager.shared.isEnabled {
                    // Permissions r√©voqu√©es
                    print("‚ö†Ô∏è Permissions d'accessibilit√© r√©voqu√©es")
                    DispatchQueue.main.async {
                        GlobalHotkeyManager.shared.disableHotkeys()
                    }
                }
            }
        }
    }
    
    // MARK: - Utilitaires
    
    private func getCurrentVersion() -> String {
        return Bundle.main.infoDictionary?["CFBundleShortVersionString"] as? String ?? "1.0"
    }
    
    /// Nettoie toutes les pr√©f√©rences li√©es aux permissions
    func resetPermissionPreferences() {
        let keys = [
            UserDefaultsKeys.lastVersion,
            UserDefaultsKeys.hasShownWelcome,
            UserDefaultsKeys.lastPermissionCheck
        ]
        
        for key in keys {
            UserDefaults.standard.removeObject(forKey: key)
        }
        
        UserDefaults.standard.synchronize()
        print("üßπ Pr√©f√©rences de permissions r√©initialis√©es")
    }
}
